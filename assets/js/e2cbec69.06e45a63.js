"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79707],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=o,g=p["".concat(l,".").concat(u)]||p[u]||m[u]||a;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},62176:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},i="Random Forest",s={unversionedId:"datascience/algorithms/random-forest",id:"datascience/algorithms/random-forest",title:"Random Forest",description:"Random Forest is an algorithm that provides some crucial improvements to the design of Decision Trees. Simply put, Random Forest is an ensemble of many smaller Decision Trees working together. Random Forest uses the simple concept that the wisdom of crowds is always better than one strong individual. By using lowly correlated small Decision Trees, their ensemble of predictions can outperform any single Decision Tree. The technique that Random Forest uses to ensemble smaller Decision Trees is called bagging. Bagging, also known as bootstrap aggregation, is randomly drawing different subsets, with replacements, from the training data, and the final prediction is decided by majority voting.",source:"@site/docs/10-datascience/algorithms/random-forest.md",sourceDirName:"10-datascience/algorithms",slug:"/datascience/algorithms/random-forest",permalink:"/docs/datascience/algorithms/random-forest",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"README",permalink:"/docs/datascience/algorithms/ml-eda/variable-distribution-analysis/"},next:{title:"Cross-domain",permalink:"/docs/datascience/basics/cross-domain"}},l={},c=[],d={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"random-forest"},"Random Forest"),(0,o.kt)("p",null,"Random Forest is an algorithm that provides some crucial improvements to the design of Decision Trees. Simply put, Random Forest is an ensemble of many smaller Decision Trees working together. Random Forest uses the simple concept that the wisdom of crowds is always better than one strong individual. By using lowly correlated small Decision Trees, their ensemble of predictions can outperform any single Decision Tree. The technique that Random Forest uses to ensemble smaller Decision Trees is called bagging. Bagging, also known as bootstrap aggregation, is randomly drawing different subsets, with replacements, from the training data, and the final prediction is decided by majority voting."),(0,o.kt)("p",null,"Random Forest selects subsets of data from the entirety of training data and trains Decision Trees on each of the subsets separately and then combines the results based on majority voting or averaging for classification or regression, respectively. When building Random Forest, it\u2019s important to notice that not every feature is selected for building each Decision Tree to create diversity while solving the Curse of Dimensionality problem. The ensemble of multiple Decision Trees makes Random Forest very stable in terms of performance. However, Random Forest does come with downfalls as it\u2019s fairly difficult to interpret and is substantially slower than Decision Trees. Due to their speed and interoperability, Decision Trees are usually chosen over Random Forest during quick tests on smaller sets of data. Random Forest is suitable when interoperability is not needed along with a large dataset."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/62965911/230725861-c5d3e71b-1304-479f-bef0-1c93452d9287.jpeg",alt:"525591_1_En_1_Fig56_HTML"})),(0,o.kt)("p",null,"Broadly, this technique is known as bagging, or bootstrap aggregating. It\u2019s an interesting idea: without adding any new data, knowledge, or unique learning algorithms, we can increase a model\u2019s performance simply by injecting randomness into the system. We train an ensemble of models, where each one is trained on a randomly selected subset of the data; after training, the predictions of this ensemble are aggregated to form the final prediction."),(0,o.kt)("p",null,"Interestingly, Random Forest reliably performs better than Decision Tree in most cases. Even given the commonly used explanation of \u201cdiversity\u201d and \u201cmany thinkers are better than one,\u201d it can be confusing to understand exactly why bagging increases performance if it doesn\u2019t actually introduce unique new learning structures."))}m.isMDXComponent=!0}}]);