"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[66776],{3905:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>u});var s=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,s)}return o}function n(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,s,a=function(e,t){if(null==e)return{};var o,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)o=i[s],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)o=i[s],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=s.createContext({}),c=function(e){var t=s.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):n(n({},t),e)),o},h=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},p=s.forwardRef((function(e,t){var o=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,h=r(e,["components","mdxType","originalType","parentName"]),p=c(o),u=a,m=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return o?s.createElement(m,n(n({ref:t},h),{},{components:o})):s.createElement(m,n({ref:t},h))}));function u(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=o.length,n=new Array(i);n[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,n[1]=r;for(var c=2;c<i;c++)n[c]=o[c];return s.createElement.apply(null,n)}return s.createElement.apply(null,o)}p.displayName="MDXCreateElement"},13228:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=o(87462),a=(o(67294),o(3905));const i={},n="Decision Trees",r={unversionedId:"datascience/algorithms/decision-trees",id:"datascience/algorithms/decision-trees",title:"Decision Trees",description:"The concept of Decision Trees appeared in the 1960s in the field of psychology for modeling the concept of human learning, visually presenting possible outcomes to potential situations that stem from one prompt. It was around that time when people discovered the usefulness of Decision Trees in programming and mathematics. The first paper that was able to develop a concept of \u201cDecision Tree\u201d mathematically was published by William Belson in 1959. In 1977, various professors from Berkley and Stanford developed an algorithm known as Classification and Regression Trees (CART), which, true to its name, consisted of Classification and Regression Trees. To this day, CART still stands as an important algorithm for data analysis. In the field of ML, Decision Tree serves as one of the most popular algorithms for real-world data science problems.",source:"@site/docs/10-datascience/algorithms/decision-trees.md",sourceDirName:"10-datascience/algorithms",slug:"/datascience/algorithms/decision-trees",permalink:"/docs/datascience/algorithms/decision-trees",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Streamlit",permalink:"/docs/visualization/streamlit/"},next:{title:"Gradient Boosting",permalink:"/docs/datascience/algorithms/gradient-boosting"}},l={},c=[],h={toc:c};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,s.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"decision-trees"},"Decision Trees"),(0,a.kt)("p",null,"The concept of Decision Trees appeared in the 1960s in the field of psychology for modeling the concept of human learning, visually presenting possible outcomes to potential situations that stem from one prompt. It was around that time when people discovered the usefulness of Decision Trees in programming and mathematics. The first paper that was able to develop a concept of \u201cDecision Tree\u201d mathematically was published by William Belson in 1959. In 1977, various professors from Berkley and Stanford developed an algorithm known as Classification and Regression Trees (CART), which, true to its name, consisted of Classification and Regression Trees. To this day, CART still stands as an important algorithm for data analysis. In the field of ML, Decision Tree serves as one of the most popular algorithms for real-world data science problems."),(0,a.kt)("p",null,"Decision Trees serve as a tool that models the outcomes of observations in a visually interpretable format. It consists of nodes and branches, which stem from a root. Consider the following example of a series of choices. The first question asked \u201cWhat color is the coin?\u201d is called the root of the tree. Each possible outcome to the question is represented under nodes that branch out from the root. Imagine flipping a coin. There are two possible outcomes, heads or tail. Following the outcome of \u201cSilver\u201d to the question asked, we can continue the splitting process by asking another question: \u201cWhat size is the coin?\u201d For questions that are not the root, they\u2019re considered parent nodes. Once we\u2019ve answered all possible questions and created every node to their possible outcomes, the final nodes are called leaf nodes:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/62965911/230725540-11f889a0-ab95-48dc-ba8a-738ef25316ce.jpeg",alt:"525591_1_En_1_Fig53_HTML"})),(0,a.kt)("p",null,"In a sense, Decision Trees can store and organize data based on their attributes. The ML concept of Decision Trees utilizes this intuition to categorize or classify data based on the patterns of their features. By splitting the samples according to their associated features, Decision Trees can be trained to learn different patterns in the data. Using this method, Decision Trees can handle high-dimensional data with ease as their approach differs greatly from KNN and regression methods. One of the major advantages of Decision Trees over the regression method is their interoperability as seen previously. It would be hard to visualize the gradient descent process on high-dimensional data but not for Decision Trees."),(0,a.kt)("p",null,"With features and targets, Decision Trees seek the best \u201cquestions\u201d to ask in the best order to split the data that resembles those assigned by the targets. Take the Titanic dataset for example. It contains features about travelers on the Titanic such as their age, sex, cabin, fare, and so on. The aim is to predict whether someone survived based on their attributes given. A Decision Tree would split the data as follows; the process is demonstrated in the following figure:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Choose a feature that best splits the data."),(0,a.kt)("li",{parentName:"ol"},"For that feature, choose a threshold that would best split the data by its labels. A threshold for a categorical feature could be true/false, or if the feature contains more than one category, it would be converted to numbers representing each class and treated as a continuous feature."),(0,a.kt)("li",{parentName:"ol"},"For each node that the split produces, repeat the preceding steps until the data is perfectly split, meaning that each node contains exactly one class or the max split, depth, defined by the user is reached.")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/62965911/230725625-60d5f731-c583-4ea5-8559-c7b78dc401e4.jpeg",alt:"525591_1_En_1_Fig54_HTML"})),(0,a.kt)("p",null,"imply stating \u201cchoosing the best feature to split the data\u201d isn\u2019t enough. Decision Trees utilize metrics that measure the \u201cimpurity\u201d of data, which determines how well the data is split. If data samples only contain one class, it\u2019s pure; on the other hand, if data samples contain half of one class and half of the other class, it\u2019s considered impure and anything in between. The two common metrics used to determine impurity in Decision Trees are Gini Impurity and Entropy."),(0,a.kt)("p",null,"However, computationally Entropy is more complex as it requires the use of logarithms, so Gini Impurity is usually the metric used in the Decision Tree to determine splits. During the split of each node, we treat the unique values of the feature as one threshold, loop through all the thresholds, and calculate its respective Gini Impurity. We perform the preceding process for every feature and then determine the best Gini Impurity, which we will split the data according to its threshold. As mentioned before, the splitting continues until each node is pure or a user-specified hyperparameter \u201cdepth\u201d is reached."),(0,a.kt)("p",null,"The depth hyperparameter decides how many \u201clevels\u201d of nodes should there be in a Decision Tree. Technically, the deeper a Decision Tree is, the higher the performance would be as the splits get more specific. Although increasing the depth may improve performance, most of the time it only applies to training data as the tree overfits easily with a high amount of depth, leading to worse performance on unseen testing data."))}d.isMDXComponent=!0}}]);