"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41431],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,x=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(x,s(s({ref:t},c),{},{components:n})):r.createElement(x,s({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},s="Text Cleaning",i={unversionedId:"datascience/nlp/text-cleaning",id:"datascience/nlp/text-cleaning",title:"Text Cleaning",description:"",source:"@site/docs/10-datascience/nlp/text-cleaning.md",sourceDirName:"10-datascience/nlp",slug:"/datascience/nlp/text-cleaning",permalink:"/docs/datascience/nlp/text-cleaning",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Text Analysis",permalink:"/docs/datascience/nlp/text-analysis"},next:{title:"Text Processing",permalink:"/docs/datascience/nlp/text-processing"}},l={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"text-cleaning"},"Text Cleaning"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import pandas as pd\nimport re\nimport nltk\nfrom bs4 import BeautifulSoup\nfrom itertools import groupby\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nps = PorterStemmer()\nnltk.download('stopwords')\nstopwords = list(set(stopwords.words('english')))\nfrom nltk.stem import WordNetLemmatizer \nlemmatizer = WordNetLemmatizer()\nnltk.download('wordnet')\n\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"!pip install ekphrasis\nfrom ekphrasis.classes.preprocessor import TextPreProcessor\nfrom ekphrasis.classes.tokenizer import SocialTokenizer\nfrom ekphrasis.dicts.emoticons import emoticons\ntext_processor = TextPreProcessor(\n  normalize=['url', 'email', 'percent', 'money', 'phone', \n              'user', 'time', 'date', 'number'],\n  # annotate={\"hashtag\", \"allcaps\", \"elongated\", \"repeated\",\n  #           'emphasis', 'censored'},\n  fix_html=True,\n  segmenter=\"twitter\",\n  corrector=\"twitter\", \n  unpack_hashtags=True,\n  unpack_contractions=True,\n  spell_correct_elong=False,\n  tokenizer=SocialTokenizer(lowercase=False).tokenize,\n  dicts=[emoticons]\n  )\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"!pip install autocorrect\nimport autocorrect\nspeller = autocorrect.Speller()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"!pip install clean-text[gpl]\nfrom cleantext import clean\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"def clean_text(text):\n    if type(text) is float:\n        return ' '\n    text = ' ' + text + ' '\n    text = BeautifulSoup(text, \"lxml\").text\n    text = re.sub(r\"http[s]?://\\S+\", \"\", text)\n    # noise removal\n    rules = [\n        {r'>\\s+': u'>'},  # remove spaces after a tag opens or closes\n        {r'\\s+': u' '},  # replace consecutive spaces\n        {r'\\s*<br\\s*/?>\\s*': u'\\n'},  # newline after a <br>\n        {r'</(div)\\s*>\\s*': u'\\n'},  # newline after </p> and </div> and <h1/>...\n        {r'</(p|h\\d)\\s*>\\s*': u'\\n\\n'},  # newline after </p> and </div> and <h1/>...\n        {r'<head>.*<\\s*(/head|body)[^>]*>': u''},  # remove <head> to </head>\n        {r'<a\\s+href=\"([^\"]+)\"[^>]*>.*</a>': r'\\1'},  # show links instead of texts\n        {r'[ \\t]*<[^<]*?/?>': u''},  # remove remaining tags\n        {r'^\\s+': u''}  # remove spaces at the beginning\n    ]\n    for rule in rules:\n        for (k, v) in rule.items():\n            regex = re.compile(k)\n            text = regex.sub(v, text)\n    text = text.rstrip()\n    text = re.sub(r\"\\s+\", \" \", text)\n    text = re.sub(r\"#\", \"\", text)\n    text = re.sub(r'<.*?>', ' ', text)\n    text = re.sub(r'\\{[^{}]*\\}', ' ', text)\n    text = re.sub(r'\\s', ' ', text)\n    text = ' '.join(text_processor.pre_process_doc(text))\n    text = ' '.join(text.split())\n    text = re.sub(r'(?:\\d+[a-zA-Z]+|[a-zA-Z]+\\d+)', '<hash>', text)\n    text = re.sub(r'\\b\\w{1,2}\\b', '', text)\n    text = ' '.join([k for k,v in groupby(text.split())])\n    text = text.lower()\n    text = clean(text,\n        fix_unicode=True,               # fix various unicode errors\n        to_ascii=True,                  # transliterate to closest ASCII representation\n        lower=True,                     # lowercase text\n        no_line_breaks=False,           # fully strip line breaks as opposed to only normalizing them\n        no_urls=True,                  # replace all URLs with a special token\n        no_emails=True,                # replace all email addresses with a special token\n        no_phone_numbers=True,         # replace all phone numbers with a special token\n        no_numbers=True,               # replace all numbers with a special token\n        no_digits=True,                # replace all digits with a special token\n        no_currency_symbols=True,      # replace all currency symbols with a special token\n        no_punct=True,                 # remove punctuations\n        replace_with_punct=\"\",          # instead of removing punctuations you may replace them\n        replace_with_url=\"<URL>\",\n        replace_with_email=\"<EMAIL>\",\n        replace_with_phone_number=\"<PHONE>\",\n        replace_with_number=\"<NUMBER>\",\n        replace_with_digit=\"0\",\n        replace_with_currency_symbol=\"<CUR>\",\n        lang=\"en\"                       # set to 'de' for German special handling\n    )\n    text = re.sub(r'[^a-z<> ]', ' ', text)\n    text = re.sub(r'\\b[a-z]\\b', ' ', text)\n    # text = speller.autocorrect_sentence(text)\n    # text = ' '.join([ps.stem(w) for w in text.split()])\n    # text = ' '.join([lemmatizer.lemmatize(w, 'v') for w in text.split()])\n    # text = ' '.join([w for w in text.split() if not w in stopwords])\n    # seen = set()\n    # seen_add = seen.add\n    # text = ' '.join([x for x in text.split() if not (x in seen or seen_add(x))])\n    text = ' '.join(text.split())\n    return text\n")))}u.isMDXComponent=!0}}]);