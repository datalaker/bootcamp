"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[95585],{3905:(a,n,e)=>{e.d(n,{Zo:()=>u,kt:()=>f});var t=e(67294);function l(a,n,e){return n in a?Object.defineProperty(a,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):a[n]=e,a}function r(a,n){var e=Object.keys(a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(a);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(a,n).enumerable}))),e.push.apply(e,t)}return e}function o(a){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){l(a,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(a,n,Object.getOwnPropertyDescriptor(e,n))}))}return a}function s(a,n){if(null==a)return{};var e,t,l=function(a,n){if(null==a)return{};var e,t,l={},r=Object.keys(a);for(t=0;t<r.length;t++)e=r[t],n.indexOf(e)>=0||(l[e]=a[e]);return l}(a,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(a);for(t=0;t<r.length;t++)e=r[t],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(a,e)&&(l[e]=a[e])}return l}var i=t.createContext({}),c=function(a){var n=t.useContext(i),e=n;return a&&(e="function"==typeof a?a(n):o(o({},n),a)),e},u=function(a){var n=c(a.components);return t.createElement(i.Provider,{value:n},a.children)},p={inlineCode:"code",wrapper:function(a){var n=a.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(a,n){var e=a.components,l=a.mdxType,r=a.originalType,i=a.parentName,u=s(a,["components","mdxType","originalType","parentName"]),d=c(e),f=l,m=d["".concat(i,".").concat(f)]||d[f]||p[f]||r;return e?t.createElement(m,o(o({ref:n},u),{},{components:e})):t.createElement(m,o({ref:n},u))}));function f(a,n){var e=arguments,l=n&&n.mdxType;if("string"==typeof a||l){var r=e.length,o=new Array(r);o[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=a,s.mdxType="string"==typeof a?a:l,o[1]=s;for(var c=2;c<r;c++)o[c]=e[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,e)}d.displayName="MDXCreateElement"},96855:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=e(87462),l=(e(67294),e(3905));const r={},o="Getting Started with Scala",s={unversionedId:"foundations/language/scala/lab-scala-getting-started/README",id:"foundations/language/scala/lab-scala-getting-started/README",title:"Getting Started with Scala",description:"Why Scala?",source:"@site/docs/01-foundations/language/scala/lab-scala-getting-started/README.md",sourceDirName:"01-foundations/language/scala/lab-scala-getting-started",slug:"/foundations/language/scala/lab-scala-getting-started/",permalink:"/docs/foundations/language/scala/lab-scala-getting-started/",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681539985,formattedLastUpdatedAt:"Apr 15, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Calculating Spark Partitions",permalink:"/docs/foundations/language/pyspark/lab-calculating-partitions/"},next:{title:"Serialization",permalink:"/docs/storage/serialization"}},i={},c=[{value:"Why Scala?",id:"why-scala",level:3},{value:"How Scala?",id:"how-scala",level:3},{value:"How to install",id:"how-to-install",level:3}],u={toc:c};function p(a){let{components:n,...e}=a;return(0,l.kt)("wrapper",(0,t.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"getting-started-with-scala"},"Getting Started with Scala"),(0,l.kt)("h3",{id:"why-scala"},"Why Scala?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expressive",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"First-class functions"),(0,l.kt)("li",{parentName:"ul"},"Closures"))),(0,l.kt)("li",{parentName:"ul"},"Concise",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Type inference"),(0,l.kt)("li",{parentName:"ul"},"Literal syntax for function creation"))),(0,l.kt)("li",{parentName:"ul"},"Java interoperability",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Can reuse java libraries"),(0,l.kt)("li",{parentName:"ul"},"Can reuse java tools"),(0,l.kt)("li",{parentName:"ul"},"No performance penalty")))),(0,l.kt)("h3",{id:"how-scala"},"How Scala?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Compiles to java bytecode"),(0,l.kt)("li",{parentName:"ul"},"Works with any standard\xa0JVM",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Or even some non-standard JVMs like Dalvik"),(0,l.kt)("li",{parentName:"ul"},"Scala compiler written by author of Java compiler")))),(0,l.kt)("h3",{id:"how-to-install"},"How to install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"pip install spylon-kernel\npython -m spylon_kernel install\n")),(0,l.kt)("p",null,"To install scala in Anaconda, first create an empty venv (",(0,l.kt)("inlineCode",{parentName:"p"},"env-scala")," in our case) and then install the scala from ",(0,l.kt)("inlineCode",{parentName:"p"},"anaconda-cluster")," channel."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"conda create -n env-scala\nconda install -c anaconda-cluster scala\nconda install -c conda-forge spylon-kernel\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 [ 799]  README.md\n\u251c\u2500\u2500 [ 157]  data\n\u2502   \u2514\u2500\u2500 [  61]  download.sh\n\u251c\u2500\u2500 [ 21K]  nbs\n\u2502   \u251c\u2500\u2500 [ 10K]  01.scala\n\u2502   \u251c\u2500\u2500 [4.3K]  02.scala\n\u2502   \u2514\u2500\u2500 [6.7K]  03.scala\n\u2514\u2500\u2500 [ 39K]  src\n    \u2514\u2500\u2500 [ 39K]  scala-spark\n        \u251c\u2500\u2500 [2.0K]  01-Overview\n        \u2502   \u251c\u2500\u2500 [ 246]  06-Strings\\ Basics.scala\n        \u2502   \u251c\u2500\u2500 [ 251]  08-Solution\\ (Arithmatic\\ Operations).scala\n        \u2502   \u251c\u2500\u2500 [ 310]  10-Solution\\ (Strings).scala\n        \u2502   \u251c\u2500\u2500 [ 466]  11-Type\\ Casting.scala\n        \u2502   \u251c\u2500\u2500 [ 278]  12-Taking\\ input\\ from\\ User.scala\n        \u2502   \u2514\u2500\u2500 [ 239]  14-Solution\\ (User\\ Input\\ and\\ Type\\ Casting).scala\n        \u251c\u2500\u2500 [ 11K]  02-Control\\ Statements\n        \u2502   \u251c\u2500\u2500 [ 373]  11-Solution\\ (Logical\\ operators).scala\n        \u2502   \u251c\u2500\u2500 [ 346]  12-If\\ else\\ if.scala\n        \u2502   \u251c\u2500\u2500 [ 514]  14-Solution(if\\ else\\ if).scala\n        \u2502   \u251c\u2500\u2500 [ 157]  16-Overview\\ of\\ While\\ Loop.scala\n        \u2502   \u251c\u2500\u2500 [ 287]  17-While\\ Loop.scala\n        \u2502   \u251c\u2500\u2500 [ 418]  19-Solution\\ 1\\ (while\\ loop).scala\n        \u2502   \u251c\u2500\u2500 [ 309]  2-If\\ else\\ statements.scala\n        \u2502   \u251c\u2500\u2500 [ 558]  20-Solution\\ 2\\ (while\\ loop).scala\n        \u2502   \u251c\u2500\u2500 [ 469]  21-Do\\ While\\ Loop.scala\n        \u2502   \u251c\u2500\u2500 [ 322]  22-For\\ Loop.scala\n        \u2502   \u251c\u2500\u2500 [ 341]  24-Solution\\ (For\\ Loop).scala\n        \u2502   \u251c\u2500\u2500 [ 584]  26-Solution(For\\ Loop).scala\n        \u2502   \u251c\u2500\u2500 [ 432]  27-Break.scala\n        \u2502   \u251c\u2500\u2500 [ 481]  28-Break\\ Fix.scala\n        \u2502   \u251c\u2500\u2500 [ 408]  3-Conditions\\ in\\ If.scala\n        \u2502   \u251c\u2500\u2500 [ 541]  30-Project\\ Solution\\ Code\\ 1.scala\n        \u2502   \u251c\u2500\u2500 [ 714]  31-Project\\ Solution\\ Code\\ 2.scala\n        \u2502   \u251c\u2500\u2500 [ 861]  32-Project\\ Solution\\ Code\\ 3.scala\n        \u2502   \u251c\u2500\u2500 [ 931]  33-Project\\ Solution\\ Code\\ 4.scala\n        \u2502   \u251c\u2500\u2500 [ 321]  5-Solution\\ (if\\ statement).scala\n        \u2502   \u251c\u2500\u2500 [ 456]  6-Nested\\ if\\ else.scala\n        \u2502   \u251c\u2500\u2500 [ 488]  8-Solution\\ (nested\\ if\\ else).scala\n        \u2502   \u2514\u2500\u2500 [ 438]  9-Logical\\ operators.scala\n        \u251c\u2500\u2500 [ 12K]  03-Functions\n        \u2502   \u251c\u2500\u2500 [ 253]  02-Writing\\ addition\\ function.scala\n        \u2502   \u251c\u2500\u2500 [ 371]  04-Solution\\ (Basic\\ Function).scala\n        \u2502   \u251c\u2500\u2500 [ 246]  06-Strings\\ basics.scala\n        \u2502   \u251c\u2500\u2500 [ 227]  08-Solution\\ (String\\ Concatination\\ Function).scala\n        \u2502   \u251c\u2500\u2500 [ 617]  10-Solution\\ (Dividing\\ Code\\ in\\ Functions).scala\n        \u2502   \u251c\u2500\u2500 [ 232]  11-Default\\ Arguments.scala\n        \u2502   \u251c\u2500\u2500 [ 969]  13-Solution(Default\\ Arguments).scala\n        \u2502   \u251c\u2500\u2500 [ 194]  14-Anonymous\\ Functions.scala\n        \u2502   \u251c\u2500\u2500 [ 414]  16-Solution(Anonymous\\ Functions).scala\n        \u2502   \u251c\u2500\u2500 [ 332]  17-Scopes.scala\n        \u2502   \u251c\u2500\u2500 [ 631]  19-\\ Project\\ Structure.scala\n        \u2502   \u251c\u2500\u2500 [1.1K]  20-Prompting\\ the\\ menu.scala\n        \u2502   \u251c\u2500\u2500 [1.8K]  21-Baisc\\ Functions.scala\n        \u2502   \u251c\u2500\u2500 [2.3K]  22-Breaking\\ code\\ in\\ more\\ functions.scala\n        \u2502   \u2514\u2500\u2500 [2.3K]  23-Final\\ Run.scala\n        \u251c\u2500\u2500 [2.4K]  04-Classes\n        \u2502   \u251c\u2500\u2500 [ 334]  02-Creating\\ Class.scala\n        \u2502   \u251c\u2500\u2500 [ 252]  03-Class\\ Constructor.scala\n        \u2502   \u251c\u2500\u2500 [ 751]  04-Functions\\ and\\ Classes.scala\n        \u2502   \u251c\u2500\u2500 [ 318]  06-Basic\\ Strucuture.scala\n        \u2502   \u2514\u2500\u2500 [ 537]  07-FInal\\ Run.scala\n        \u2514\u2500\u2500 [ 11K]  05-Data\\ Structures\n            \u251c\u2500\u2500 [ 301]  02-Lists\\ introduction.scala\n            \u251c\u2500\u2500 [ 319]  03-Lists\\ Create\\ and\\ Delete\\ Elements.scala\n            \u251c\u2500\u2500 [ 219]  04-Lists\\ Take.scala\n            \u251c\u2500\u2500 [ 297]  05-ListBuffer\\ Introduction.scala\n            \u251c\u2500\u2500 [ 273]  06-Add\\ data\\ in\\ ListBuffer.scala\n            \u251c\u2500\u2500 [ 284]  07-Remove\\ data\\ from\\ ListBuffer.scala\n            \u251c\u2500\u2500 [ 253]  08-Take\\ data\\ from\\ ListBuffer.scala\n            \u251c\u2500\u2500 [ 373]  10-Project\\ Architecture\\ Implementation.scala\n            \u251c\u2500\u2500 [ 557]  11-User\\ Input\\ for\\ Objects.scala\n            \u251c\u2500\u2500 [ 789]  12-Implementing\\ the\\ control\\ flow.scala\n            \u251c\u2500\u2500 [1.0K]  13-Creating\\ Required\\ Functions\\ inside\\ Class.scala\n            \u251c\u2500\u2500 [ 240]  15-Creating\\ Maps.scala\n            \u251c\u2500\u2500 [ 299]  16-Check\\ Key\\ in\\ Map.scala\n            \u251c\u2500\u2500 [ 246]  17-Update\\ Value\\ in\\ Map.scala\n            \u251c\u2500\u2500 [ 302]  18-Add\\ and\\ Remove\\ items\\ from\\ Maps.scala\n            \u251c\u2500\u2500 [ 262]  19-Iterating\\ on\\ Maps.scala\n            \u251c\u2500\u2500 [ 409]  22-Project\\ Structure\\ Code.scala\n            \u251c\u2500\u2500 [ 507]  23-Using\\ Maps\\ for\\ word\\ count.scala\n            \u251c\u2500\u2500 [ 768]  24-Final\\ Run.scala\n            \u251c\u2500\u2500 [ 151]  25-Sets\\ Overview.scala\n            \u251c\u2500\u2500 [ 255]  26-Add\\ and\\ Remove\\ Item\\ from\\ the\\ Set.scala\n            \u251c\u2500\u2500 [ 400]  29-Push\\ and\\ Pop\\ in\\ Stack.scala\n            \u251c\u2500\u2500 [ 467]  30-Stack\\ Attributes.scala\n            \u251c\u2500\u2500 [ 535]  33-Project\\ Architecture\\ Code.scala\n            \u2514\u2500\u2500 [ 912]  34-Extra\\ Starting\\ Bracket\\ Use\\ Case.scala\n\n  62K used in 9 directories, 79 files\n")))}p.isMDXComponent=!0}}]);