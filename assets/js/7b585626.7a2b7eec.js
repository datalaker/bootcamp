"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37783],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),i=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(r),m=n,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return r?a.createElement(g,s(s({ref:t},p),{},{components:r})):a.createElement(g,s({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var i=2;i<o;i++)s[i]=r[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},20721:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var a=r(87462),n=(r(67294),r(3905));const o={},s="Lab: Generate Trips Data using Stored Procedure",l={unversionedId:"storage/lab-postgres-trips-stored-procedure/README",id:"storage/lab-postgres-trips-stored-procedure/README",title:"Lab: Generate Trips Data using Stored Procedure",description:"- Step 1 - Connect to the database",source:"@site/docs/02-storage/lab-postgres-trips-stored-procedure/README.md",sourceDirName:"02-storage/lab-postgres-trips-stored-procedure",slug:"/storage/lab-postgres-trips-stored-procedure/",permalink:"/docs/storage/lab-postgres-trips-stored-procedure/",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681539985,formattedLastUpdatedAt:"Apr 15, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Lab: Postgres Crime Reports",permalink:"/docs/storage/lab-postgres-crime-reports/"},next:{title:"Lab: Police API",permalink:"/docs/storage/lab-mysql-police-api-etl/"}},c={},i=[],p={toc:i};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"lab-generate-trips-data-using-stored-procedure"},"Lab: Generate Trips Data using Stored Procedure"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 1 - Connect to the database")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"psql --host=database-1.cy8ltogyfgas.us-east-1.rds.amazonaws.com --port=5432 --username=postgres --dbname=sparsh\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 2 - Run the following commands to create a schema and table for the fictional trip dataset:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"create schema delta_emr_source;\ncreate table delta_emr_source.travel_details (trip_id int PRIMARY KEY,tstamp timestamp, route_id varchar(2),destination varchar(50),source_location varchar(50));\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 3 - Create the following stored procedure to generate the records for the trip dataset and insert the records into the table:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace procedure delta_emr_source.insert_records(records int)\nlanguage plpgsql\nas $$\ndeclare\nmax_trip_id integer;\nbegin\n--get max trip_id\nselect coalesce(max(trip_id),1) into max_trip_id from delta_emr_source.travel_details;\n\n--insert records\nfor i in max_trip_id+1..max_trip_id+records loop\nINSERT INTO delta_emr_source.travel_details (trip_id, tstamp, route_id,destination,source_location) values (i, current_timestamp, chr(65 + (i % 10)),(array['Seattle', 'New York', 'New Jersey', 'Los Angeles', 'Las Vegas',\n'Tucson', 'Washington DC', 'Philadelphia', 'Miami', 'San Francisco'])[(floor(random() * 10))+1],(array['Seattle', 'New York', 'New Jersey', 'Los Angeles', 'Las Vegas',\n'Tucson', 'Washington DC', 'Philadelphia', 'Miami', 'San Francisco'])[(floor(random() * 10))+1]);\nend loop;\n\ncommit;\n\nraise notice 'Inserted record count - %', records;\nend; $$;\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 4 - Call the preceding stored procedure to insert 20,000 records into the Aurora PostgreSQL database:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"call delta_emr_source.insert_records(20000);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Step 5 - After the stored procedure is complete, verify that the records have been inserted successfully:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"select count(*) from delta_emr_source.travel_details;\n")))}d.isMDXComponent=!0}}]);