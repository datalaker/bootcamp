"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79552],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},91131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},l="Patents Analytics Spark",o={unversionedId:"capstones/other/patent-analytics/spark/README",id:"capstones/other/patent-analytics/spark/README",title:"Patents Analytics Spark",description:"This folder contains the pyspark scripts used for cleaning, performing keyword extraction, and doing the ETL job for patents analytics data.",source:"@site/docs/12-capstones/other/patent-analytics/spark/README.md",sourceDirName:"12-capstones/other/patent-analytics/spark",slug:"/capstones/other/patent-analytics/spark/",permalink:"/docs/capstones/other/patent-analytics/spark/",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{}},p={},s=[{value:"Project Structure",id:"project-structure",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Installing the project dependencies",id:"installing-the-project-dependencies",level:3},{value:"Create the configuration file",id:"create-the-configuration-file",level:3},{value:"Bundle the dependencies",id:"bundle-the-dependencies",level:3},{value:"Copy spark scripts to airflow",id:"copy-spark-scripts-to-airflow",level:3},{value:"Unit Testing",id:"unit-testing",level:2}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"patents-analytics-spark"},"Patents Analytics Spark"),(0,r.kt)("p",null,"This folder contains the pyspark scripts used for cleaning, performing keyword extraction, and doing the ETL job for patents analytics data."),(0,r.kt)("p",null,"This project follows the recommendations from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AlexIoannides/pyspark-example-project"},"pyspark-example-project")," on how to structure the project, passing configuration parameters to a pyspark job, handling dependencies, and unit testing pyspark scripts. Please refer to the link for more details."),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Configs")," hosts the config file for the pyspark jobs. The file inside this folder will be submitted to Spark cluster together with the script"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dependencies")," contains commonly used functions shared by the pyspark scripts. These files will be bundled into packages.zip and should be submitted together with the script to Spark cluster."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jobs")," contains the pyspark scripts to run data cleaning, keyword extraction, and ETL"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tests")," contains the unit test for the pyspark scripts"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"build_dependencies.sh")," packages all the dependencies which include all the files from ",(0,r.kt)("inlineCode",{parentName:"li"},"dependencies")," folder and the python libraries specified in the pipfile into ",(0,r.kt)("inlineCode",{parentName:"li"},"packages.zip")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"copy_jobs_to_ariflwo.sh")," copies all the required files to be submitted to Spark Cluster to airflow folder."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"packages.zip")," is the result of running ",(0,r.kt)("inlineCode",{parentName:"li"},"build_dependencies.sh"))),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("h3",{id:"installing-the-project-dependencies"},"Installing the project dependencies"),(0,r.kt)("p",null,"We are using pipenv to manage the project dependencies. Please follow these steps to set up the required libraries:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install ",(0,r.kt)("inlineCode",{parentName:"li"},"pipenv"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"pip install pipenv\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install the libraries specified in the pipfile")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"pipenv install\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Activate the pipenv environment")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"pipenv shell .\n")),(0,r.kt)("h3",{id:"create-the-configuration-file"},"Create the configuration file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a folder named ",(0,r.kt)("inlineCode",{parentName:"li"},"configs")," in the same level as this README.md file, and create a file inside named ",(0,r.kt)("inlineCode",{parentName:"li"},"etl_config.json"),". Put the following value:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "redshift": {\n    "username": "<redshift username>",\n    "password": "<redshift password>",\n    "jdbc_url": "<redshift jdbc url>",\n    "s3_temp_dir": "<s3 path to store temp data for writing to redshift>",\n    "iam_role": "<iam role to allow redshift to read s3>"\n  },\n  "cleaned_data_s3_path": "<s3 path to store cleaned data>",\n  "raw_data_s3_path": "<s3 path to store raw data>"\n}\n')),(0,r.kt)("h3",{id:"bundle-the-dependencies"},"Bundle the dependencies"),(0,r.kt)("p",null,"Run the following command to package all the script's dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"./build_dependencies.sh\n")),(0,r.kt)("h3",{id:"copy-spark-scripts-to-airflow"},"Copy spark scripts to airflow"),(0,r.kt)("p",null,"Run the following command to copied all the scripts, dependencies, and configs to airflow folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"./copy_jobs_to_airflow.sh\n")),(0,r.kt)("h2",{id:"unit-testing"},"Unit Testing"),(0,r.kt)("p",null,"Please follow these steps to be able to run unit testing locally in Windows:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Setup Java")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install JDK version 11, this is the version required because we are using spark version 3.1.2"),(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"JAVA_HOME")," environment variable to the JDK path")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Setup Python Path")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add the path to the JDK's bin folder to the ",(0,r.kt)("inlineCode",{parentName:"li"},"PATH"),"environment variable"),(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"PYSPARK_DRIVER_PYTHON")," environment variable to the python.exe path of the pipenv environment"),(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"PYSPARK_PYTHON")," environment variable to the python.exe path of the pipenv environment")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Hadoop Executable")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Download ",(0,r.kt)("inlineCode",{parentName:"li"},"winutils.exe")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"hadoop.dll")," from ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/steveloughran/winutils/tree/master/hadoop-3.0.0/bin"},"https://github.com/steveloughran/winutils/tree/master/hadoop-3.0.0/bin")),(0,r.kt)("li",{parentName:"ul"},"Create a folder in your local directory named ",(0,r.kt)("inlineCode",{parentName:"li"},"bin"),", and place the ",(0,r.kt)("inlineCode",{parentName:"li"},"winutils.exe")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"hadoop.dll")," inside the bin folder"),(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},"HADOOP_HOME")," environment variable and put the path to the parent folder of the bin folder created above."),(0,r.kt)("li",{parentName:"ul"},"Add the bin folder to the ",(0,r.kt)("inlineCode",{parentName:"li"},"PATH")," environment variable")),(0,r.kt)("p",null,"You can run the unittest using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"python -m unittest discover -s tests\n")))}c.isMDXComponent=!0}}]);