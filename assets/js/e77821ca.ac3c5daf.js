"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19438],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,g=m["".concat(i,".").concat(u)]||m[u]||c[u]||l;return t?a.createElement(g,s(s({ref:n},p),{},{components:t})):a.createElement(g,s({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<l;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));const l={},s=void 0,o={unversionedId:"data-modeling/lab-postgres-demographics-datamodel",id:"data-modeling/lab-postgres-demographics-datamodel",title:"lab-postgres-demographics-datamodel",description:"Create Fact and Dimension Tables from Denormalized Raw Data",source:"@site/docs/04-data-modeling/lab-postgres-demographics-datamodel.md",sourceDirName:"04-data-modeling",slug:"/data-modeling/lab-postgres-demographics-datamodel",permalink:"/docs/data-modeling/lab-postgres-demographics-datamodel",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Postgres Bus Rapid Transit",permalink:"/docs/data-modeling/lab-postgres-busrapid-transit/"},next:{title:"Postgres ELT Datamodel with PSQL",permalink:"/docs/data-modeling/lab-postgres-elt-datamodel/"}},i={},d=[],p={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create Fact and Dimension Tables from Denormalized Raw Data")),(0,r.kt)("p",null,"In data warehousing world there are occasions where developers have to reverse engineer model from flat csv files. We will understand this with simple example."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Login to RDS Postgres using psql")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\npsql --host=database-1.cy8ltogyfgas.us-east-1.rds.amazonaws.com --port=5432 --username=postgres --password --dbname=sparsh\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create Schema & Rawdata table")),(0,r.kt)("p",null,"This step is the dump the entire CSV into a ProstgreSQL table so its easier to clean or create Dimension tables."),(0,r.kt)("p",null,"Here we will be creating 3 schemas called landing, dim and fact. Schemas are very useful in grouping the tables logically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\ncreate schema elt_landing;\n\ncreate schema elt_dim;\n\ncreate schema elt_fact;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\ncreate table elt_landing.rawdata (\n\n    name varchar(100)\n\n    ,gender varchar(20)\n\n    ,profession varchar(50)\n\n    ,state varchar(2)\n\n    ,asofdate date\n\n    ,temperature float\n\n    ,pulse int\n\n);\n\n")),(0,r.kt)("p",null,"Verify the table & schema creation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\n\\dt elt_*.*\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Import CSV data into Postgres table")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"\nName,Gender,Profession,state,asOfDate,temperature,pulse\n\nRachel Green,Female,Designer,NY,2020-11-01,98.4,60\n\nSheldon Cooper,Male,Physicist,CA,2020-11-05,98.5,70\n\nPenny,Female,Waitress,CA,2020-11-15,99.2,75\n\nGeorge Costanza,Male,Agent,NJ,2020-05-05,98.7,90\n\nJerry Seinfeld,Male,Comedian,NY,2020-01-01,98.6,65\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\n\\COPY elt_landing.rawdata FROM 'data.csv' DELIMITER ',' CSV HEADER;\n\n")),(0,r.kt)("p",null,"Verify the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\nselectcount(*) from elt_landing.rawdata;\n\nselect* from elt_landing.rawdata limit 10;\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Add a surrogate ID column")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"surrogate column means, column with sequence of numbers, generally auto generated.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\nalter table elt_landing.rawdata add id serial;\n\nselect* from elt_landing.rawdata limit 10;\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Identify the possible Dimensions")),(0,r.kt)("p",null,"In this sample we can choose Gender, Name, State, Profession as possible dimensions."),(0,r.kt)("p",null,"Using select statement generate Dimension tables based on Distinct values."),(0,r.kt)("p",null,"Creating Gender dimension. Here the sub query returns the distinct genders and using the Windowing Function (row_number()) we are generating a unique ID for each gender."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\ncreatetableelt_dim.genderas\n\nselect\n\nrow_number() Over(order by gender) as genderid\n\n    ,gender \n\nfrom\n\n    (select distinct gender fromelt_landing.rawdata) t;\n\n")),(0,r.kt)("p",null,"Similarly creating other Dimension tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\n-- Second Query\n\n\ncreatetableelt_dim.personas\n\nselect\n\nrow_number() Over(order byname) as personid\n\n   ,name\n\nfrom\n\n    (select distinctnamefromelt_landing.rawdata) t;\n\n\n-- Third Query\n\n\ncreatetableelt_dim.professionas\n\nselect\n\nrow_number() Over(order by profession) as professionid\n\n    ,profession \n\nfrom\n\n    (select distinct profession fromelt_landing.rawdata) t;\n\n\n-- Fourth Query\n\n\ncreatetableelt_dim.stateas\n\nselect\n\nrow_number() Over(order bystate) as stateid\n\n    ,state\n\nfrom\n\n    (select distinctstatefromelt_landing.rawdata) t;\n\n")),(0,r.kt)("p",null,"Verify the Dimension tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\nselect * fromelt_dim.person;\n\nselect * fromelt_dim.profession;\n\nselect * fromelt_dim.state;\n\nselect * fromelt_dim.gender;\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Build Fact table based on IDs from Dimension Table")),(0,r.kt)("p",null,"This is the key step which will be generating the necessary Fact table. As the Dimensions are generated from landing data, JOIN will be used to build the fact table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\ncreatetableelt_fact.user\n\nas\n\nselect\n\nr.id\n\n    ,p.personid\n\n    ,g.genderid\n\n    ,pr.professionID\n\n    ,s.stateID\n\n    ,r.asofdate\n\n    ,r.temperature\n\n    ,r.pulse\n\nfrom\n\nelt_landing.rawdata r\n\nJOINelt_dim.personas p onr.name=p.name\n\nJOINelt_dim.genderas g onr.gender=g.gender\n\nJOINelt_dim.professionas pr onr.profession=pr.profession\n\nJOINelt_dim.stateas s onr.state=s.state;\n\n")),(0,r.kt)("p",null,"In the above query r.id is the Original Surrogate key from elt_landing.rawdata."),(0,r.kt)("p",null,"Compare and verify the data between elt_landing.rawdata and elt_fact.user table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\nselect * fromelt_landing.rawdatawhere id =1;\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\nselect * fromelt_fact.userwhere id =1;\n\nselect * fromelt_dim.personwhere personid =4;\n\n")),(0,r.kt)("p",null,"This is the basics, if needed the data can be normalized / modeled further."),(0,r.kt)("p",null,"Example : asofdate is used as part of Fact, if needed date can be normalized into Year, Month, Day for Snowflake Schema."))}c.isMDXComponent=!0}}]);