"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22012],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},14660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={},l="Snippets related to Lambda function",i={unversionedId:"processing/aws-lambda-snippets",id:"processing/aws-lambda-snippets",title:"Snippets related to Lambda function",description:"Create a CloudFormation template for creating a Lambda function that writes to an S3 bucket",source:"@site/docs/03-processing/aws-lambda-snippets.md",sourceDirName:"03-processing",slug:"/processing/aws-lambda-snippets",permalink:"/docs/processing/aws-lambda-snippets",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kinesis",permalink:"/docs/processing/aws-kinesis"},next:{title:"AWS Lambda",permalink:"/docs/processing/aws-lambda"}},c={},s=[{value:"Create a CloudFormation template for creating a Lambda function that writes to an S3 bucket",id:"create-a-cloudformation-template-for-creating-a-lambda-function-that-writes-to-an-s3-bucket",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"snippets-related-to-lambda-function"},"Snippets related to Lambda function"),(0,o.kt)("h2",{id:"create-a-cloudformation-template-for-creating-a-lambda-function-that-writes-to-an-s3-bucket"},"Create a CloudFormation template for creating a Lambda function that writes to an S3 bucket"),(0,o.kt)("p",null,"The code creates a text file that reads \u2018Hello world!\u2019 and stores it into the s3 bucket. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import os\nimport boto3\nimport io\n\ndef lambda_handler(event, context):\n    bucket_name = event['bucket_name']\n    file_name = event['file_name']\n    \n    file = io.BytesIO(bytes('Hello world!', encoding='utf-8'))\n    \n    s3 = boto3.resource('s3')\n    bucket = s3.Bucket(bucket_name)\n    bucket_object = bucket.Object(file_name)\n    bucket_object.upload_fileobj(file)\n")),(0,o.kt)("p",null,"The template consists of the following resources:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Lambda Function: HelloWorld"),(0,o.kt)("li",{parentName:"ol"},"S3 Bucket: LambdaZipsBucket"),(0,o.kt)("li",{parentName:"ol"},"IAM Role: HelloWorldRole")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"AWSTemplateFormatVersion: 2010-09-09\nResources:\n  HelloWorld:\n    Type: 'AWS::Lambda::Function'\n    Properties:\n        FunctionName: helloWorld\n        Handler: lambda_function.lambda_handler\n        Role: !GetAtt HelloWorldRole.Arn\n        Runtime: python3.9\n        Code:\n            S3Bucket: 'mybucket'\n            S3Key: 'lambda_function.py.zip'\n  LambdaZipsBucket:\n    Type: 'AWS::S3::Bucket'\n    Properties:\n        BucketName: 'lambdazips2'\n  HelloWorldRole:\n    Type: 'AWS::IAM::Role'\n    Properties:\n      RoleName: HelloWorldRole\n      ManagedPolicyArns: \n        - \"arn:aws:iam::aws:policy/CloudWatchFullAccess\"\n        - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - 'sts:AssumeRole'\n      Path: /\n      Policies:\n        - PolicyName: AWSLambdaBasicExecutionRole\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - 'logs:CreateLogGroup'\n                  - 'logs:CreateLogStream'\n                  - 'logs:PutLogEvents'\n                Resource: '*'\n")))}u.isMDXComponent=!0}}]);