"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[16257],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},76759:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},l="Lab: Glue ETL and CDC UPSERT",s={unversionedId:"processing/lab-glue-deltalake-cdc-upsert/README",id:"processing/lab-glue-deltalake-cdc-upsert/README",title:"Lab: Glue ETL and CDC UPSERT",description:"Handle UPSERT data operations using open-source Delta Lake and AWS Glue",source:"@site/docs/03-processing/lab-glue-deltalake-cdc-upsert/README.md",sourceDirName:"03-processing/lab-glue-deltalake-cdc-upsert",slug:"/processing/lab-glue-deltalake-cdc-upsert/",permalink:"/docs/processing/lab-glue-deltalake-cdc-upsert/",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681732641,formattedLastUpdatedAt:"Apr 17, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Lab: Glue ETL",permalink:"/docs/processing/lab-glue-advanced/"},next:{title:"Lab: Glue Studio Custom Transforms",permalink:"/docs/processing/lab-glue-studio-custom-transforms/"}},i={},c=[{value:"Files",id:"files",level:2},{value:"Notebook",id:"notebook",level:2}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lab-glue-etl-and-cdc-upsert"},"Lab: Glue ETL and CDC UPSERT"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Handle UPSERT data operations using open-source Delta Lake and AWS Glue")),(0,r.kt)("p",null,"Many customers need an ACID transaction (atomic, consistent, isolated, durable) data lake that can log change data capture (CDC) from operational data sources. There is also demand for merging real-time data into batch data. Delta Lake framework provides these two capabilities. In this lab, we learn how to handle UPSERTs (updates and inserts) of the operational data using natively integrated Delta Lake with ",(0,r.kt)("a",{parentName:"p",href:"https://aws.amazon.com/glue/"},"AWS Glue"),", and query the Delta Lake using ",(0,r.kt)("a",{parentName:"p",href:"https://aws.amazon.com/athena/"},"Amazon Athena"),"."),(0,r.kt)("p",null,"We examine a hypothetical insurance organization that issues commercial policies to small- and medium-scale businesses. The insurance prices vary based on several criteria, such as where the business is located, business type, earthquake or flood coverage, and so on. This organization is planning to build a data analytical platform, and the insurance policy data is one of the inputs to this platform. Because the business is growing, hundreds and thousands of new insurance policies are being enrolled and renewed every month. Therefore, all this operational data needs to be sent to Delta Lake in near-real time so that the organization can perform various analytics, and build machine learning (ML) models to serve their customers in a more efficient and cost-effective way."),(0,r.kt)("p",null,"The use case we use in this lab is about a commercial insurance company. We use a simple dataset that contains the following columns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Policy")," \u2013 Policy number, entered as text"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Expiry")," \u2013 Date that policy expires"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Location")," \u2013 Location type (Urban or Rural)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"State")," \u2013 Name of state where property is located"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Region")," \u2013 Geographic region where property is located"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Insured Value")," \u2013 Property value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Business Type ")," \u2013 Business use type for property, such as Farming or Retail"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Earthquake")," \u2013 Is earthquake coverage included (Y or N)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Flood")," \u2013 Is flood coverage included (Y or N)")),(0,r.kt)("p",null,"Note: The dataset contains a sample of 25 insurance policies. In the case of a production dataset, it may contain millions of records."),(0,r.kt)("h2",{id:"files"},"Files"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sparsh-ai/recohut/tree/main/docs/03-processing/lab-glue-deltalake-cdc-upsert"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white",alt:"Github"}))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 [2.2K]  README.md\n\u251c\u2500\u2500 [1.8K]  data\n\u2502   \u251c\u2500\u2500 [ 282]  cdc-load.csv\n\u2502   \u2514\u2500\u2500 [1.4K]  full-load.csv\n\u251c\u2500\u2500 [ 158]  glue-targets.json\n\u251c\u2500\u2500 [6.8K]  jobs\n\u2502   \u251c\u2500\u2500 [3.9K]  CDC-Load-Job.json\n\u2502   \u2514\u2500\u2500 [2.8K]  Full-Load-Job.json\n\u251c\u2500\u2500 [ 51K]  main.ipynb\n\u251c\u2500\u2500 [ 634]  policy-document.json\n\u2514\u2500\u2500 [ 238]  role-trust.json\n\n  63K used in 2 directories, 9 files\n")),(0,r.kt)("h2",{id:"notebook"},"Notebook"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://nbviewer.org/github/sparsh-ai/recohut/blob/main/docs/03-processing/lab-glue-deltalake-cdc-upsert/main.ipynb"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/jupyter-notebook-informational?logo=jupyter",alt:"nbviewer"}))))}p.isMDXComponent=!0}}]);