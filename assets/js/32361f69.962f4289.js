"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[43233],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var s=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=s.createContext({}),d=function(e){var n=s.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return s.createElement(m.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},c=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(t),p=a,h=c["".concat(m,".").concat(p)]||c[p]||l[p]||r;return t?s.createElement(h,o(o({ref:n},u),{},{components:t})):s.createElement(h,o({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=c;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var d=2;d<r;d++)o[d]=t[d];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}c.displayName="MDXCreateElement"},54502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=t(87462),a=(t(67294),t(3905));const r={},o="SQL Danny's Diner Assignment",i={unversionedId:"foundations/programming-languages/sql/challenges/assignment5/README",id:"foundations/programming-languages/sql/challenges/assignment5/README",title:"SQL Danny's Diner Assignment",description:"Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen.",source:"@site/docs/01-foundations/04-programming-languages/sql/challenges/assignment5/README.md",sourceDirName:"01-foundations/04-programming-languages/sql/challenges/assignment5",slug:"/foundations/programming-languages/sql/challenges/assignment5/",permalink:"/docs/foundations/programming-languages/sql/challenges/assignment5/",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Assignment",permalink:"/docs/foundations/programming-languages/sql/challenges/assignment4/"},next:{title:"SQL Pizza Runner Assignment",permalink:"/docs/foundations/programming-languages/sql/challenges/assignment6/"}},m={},d=[{value:"Seed",id:"seed",level:2},{value:"Questions",id:"questions",level:2},{value:"Answers",id:"answers",level:2}],u={toc:d};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,s.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sql-dannys-diner-assignment"},"SQL Danny's Diner Assignment"),(0,a.kt)("p",null,"Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen."),(0,a.kt)("p",null,"Danny\u2019s Diner is in need of your assistance to help the restaurant stay afloat - the restaurant has captured some very basic data from their few months of operation but have no idea how to use their data to help them run the business."),(0,a.kt)("p",null,"Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they\u2019ve spent and also which menu items are their favourite. Having this deeper connection with his customers will help him deliver a better and more personalised experience for his loyal customers."),(0,a.kt)("p",null,"He plans on using these insights to help him decide whether he should expand the existing customer loyalty program - additionally he needs help to generate some basic datasets so his team can easily inspect the data without needing to use SQL."),(0,a.kt)("p",null,"Danny has provided you with a sample of his overall customer data due to privacy issues - but he hopes that these examples are enough for you to write fully functioning SQL queries to help him answer his questions!"),(0,a.kt)("p",null,"Danny has shared with you 3 key datasets for this case study:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"sales"),(0,a.kt)("li",{parentName:"ul"},"menu"),(0,a.kt)("li",{parentName:"ul"},"members")),(0,a.kt)("p",null,"You can inspect the entity relationship diagram and example data below."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/62965911/214232256-4c26d883-a538-4a83-851e-ccc2e605976d.png",alt:null})),(0,a.kt)("h2",{id:"seed"},"Seed"),(0,a.kt)("p",null,"Use the following seed code to populate the data in your database:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SCHEMA IF NOT EXISTS dannys_diner;\nUSE SCHEMA dannys_diner;\n\nDROP TABLE IF EXISTS sales;\nCREATE TABLE sales (\n  \"customer_id\" VARCHAR(1),\n  \"order_date\" DATE,\n  \"product_id\" INTEGER\n);\nINSERT INTO sales\n  (\"customer_id\", \"order_date\", \"product_id\")\nVALUES\n  ('A', '2021-01-01', '1'),\n  ('A', '2021-01-01', '2'),\n  ('A', '2021-01-07', '2'),\n  ('A', '2021-01-10', '3'),\n  ('A', '2021-01-11', '3'),\n  ('A', '2021-01-11', '3'),\n  ('B', '2021-01-01', '2'),\n  ('B', '2021-01-02', '2'),\n  ('B', '2021-01-04', '1'),\n  ('B', '2021-01-11', '1'),\n  ('B', '2021-01-16', '3'),\n  ('B', '2021-02-01', '3'),\n  ('C', '2021-01-01', '3'),\n  ('C', '2021-01-01', '3'),\n  ('C', '2021-01-07', '3');\n \nDROP TABLE IF EXISTS menu;\nCREATE TABLE menu (\n  \"product_id\" INTEGER,\n  \"product_name\" VARCHAR(5),\n  \"price\" INTEGER\n);\nINSERT INTO menu\n  (\"product_id\", \"product_name\", \"price\")\nVALUES\n  ('1', 'sushi', '10'),\n  ('2', 'curry', '15'),\n  ('3', 'ramen', '12');\n  \nDROP TABLE IF EXISTS members;\nCREATE TABLE members (\n  \"customer_id\" VARCHAR(1),\n  \"join_date\" DATE\n);\nINSERT INTO members\n  (\"customer_id\", \"join_date\")\nVALUES\n  ('A', '2021-01-07'),\n  ('B', '2021-01-09');\n")),(0,a.kt)("h2",{id:"questions"},"Questions"),(0,a.kt)("p",null,"Answer the following questions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"What is the total amount each customer spent at the restaurant?"),(0,a.kt)("li",{parentName:"ol"},"How many days has each customer visited the restaurant?"),(0,a.kt)("li",{parentName:"ol"},"What was the first item from the menu purchased by each customer?"),(0,a.kt)("li",{parentName:"ol"},"What is the most purchased item on the menu and how many times was it purchased by all customers?"),(0,a.kt)("li",{parentName:"ol"},"Which item was the most popular for each customer?"),(0,a.kt)("li",{parentName:"ol"},"Which item was purchased first by the customer after they became a member?"),(0,a.kt)("li",{parentName:"ol"},"Which item was purchased just before the customer became a member?"),(0,a.kt)("li",{parentName:"ol"},"What is the total items and amount spent for each member before they became a member?"),(0,a.kt)("li",{parentName:"ol"},"If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?"),(0,a.kt)("li",{parentName:"ol"},"In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?")),(0,a.kt)("h2",{id:"answers"},"Answers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'-- How many days each customer spent at restaurent \nSELECT\n    "customer_id",\n    COUNT(DISTINCT "order_date") AS total_days_spent\nFROM sales\nGROUP BY "customer_id"\nORDER BY total_days_spent DESC\n;\n\n-- What was the first item from the menu purchased by each customer?\nSELECT\n    DISTINCT s."customer_id",\n    s."order_date", \n    m."product_name"\nFROM dannys_diner.sales as s\nINNER JOIN dannys_diner.menu as m \n    ON s."product_id" = m."product_id"\nORDER BY s."order_date"\nLIMIT 3\n;\n\n-- What is the most purchased item on the menu and how many times \n SELECT \n      m.product_name as product_name,\n      count(m.product_id) as Total_no_of_times_purc\n  FROM dannys_diner.sales s\n  INNER JOIN dannys_diner.menu m\n      ON s.product_id = m.product_id\n  GROUP BY m.product_name\n  ORDER BY Total_no_of_times_purc DESC\n;\n\n-- Which item was the most popular for each customer?\nWITH fav_item_cte AS\n(\n SELECT \n    s.customer_id as customer_id,\n    m.product_name as product_name, \n    COUNT(m.product_id) AS order_count,\n    DENSE_RANK() OVER(\n          PARTITION BY s.customer_id\n          ORDER BY COUNT(s.customer_id) DESC\n          ) AS rank\nFROM dannys_diner.menu AS m\nJOIN dannys_diner.sales AS s\n    ON m.product_id = s.product_id\nGROUP BY s.customer_id, m.product_name\n)\n\nSELECT \n    customer_id,\n    product_name,\n    order_count\nFROM fav_item_cte\nWHERE rank =1\n;\n\n-- Which item was purchased first by the customer after they became a member?\nWITH ordered_after_member AS\n(\n  SELECT \n      s.customer_id as ID\n      ,m.product_name as name\n      ,s.order_date as ordered_date\n      ,DENSE_RANK() OVER(\n          PARTITION BY s.customer_id\n          ORDER BY s.order_date\n      ) as rank\n  FROM dannys_diner.sales s\n  INNER JOIN dannys_diner.menu m\n      ON s.product_id  = m.product_id\n  INNER JOIN dannys_diner.members mem\n      ON s.customer_id = mem.customer_id\n  WHERE s.order_date >= mem.join_date\n)\n\nSELECT \n    *\nFROM ordered_after_member\nWHERE rank = 1\n;\n\n--  What is the total items and amount spent for each member before they became a member?\nSELECT \n      s.customer_id as ID\n      ,COUNT(m.product_id) as total_item\n  FROM dannys_diner.sales s\n  INNER JOIN dannys_diner.menu m\n      ON s.product_id  = m.product_id\n  INNER JOIN dannys_diner.members mem\n      ON s.customer_id = mem.customer_id\n  WHERE s.order_date < mem.join_date\n  group by ID\n;\n\nSELECT \n      s.customer_id as ID\n      ,CONCAT(SUM(m.price),\'$\') as total_price\n  FROM dannys_diner.sales s\n  INNER JOIN dannys_diner.menu m\n      ON s.product_id  = m.product_id\n  INNER JOIN dannys_diner.members mem\n      ON s.customer_id = mem.customer_id\n  WHERE s.order_date < mem.join_date\n  group by ID\n  \n-- If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?\nSELECT \n    s.customer_id,\n    SUM(\n      CASE\n            WHEN m.product_name = \'sushi\'\n            THEN m.price*20\n            ELSE m.price*10\n        END \n    ) AS Total_points\nFROM dannys_diner.sales s \nINNER JOIN dannys_diner.menu m\n    ON s.product_id  = m.product_id\nGROUP BY s.customer_id\n;\n\n-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?\nSELECT \n    s.customer_id as ID\n    ,(SUM(m.price)*20) As Total_points\n    \nFROM dannys_diner.sales s\nINNER JOIN dannys_diner.menu m\n    ON s.product_id  = m.product_id\nINNER JOIN dannys_diner.members mem\n     ON s.customer_id = mem.customer_id\nWHERE s.order_date >= mem.join_date AND s.order_date BETWEEN \'2021-01-01\' AND \'2021-01-31\'\nGROUP BY  ID\n;\n')))}l.isMDXComponent=!0}}]);