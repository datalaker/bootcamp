"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88715],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(a),d=n,m=h["".concat(l,".").concat(d)]||h[d]||f[d]||o;return a?r.createElement(m,i(i({ref:t},u),{},{components:a})):r.createElement(m,i({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},24334:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const o={},i="Feature Selection",s={unversionedId:"datascience/feature-selection",id:"datascience/feature-selection",title:"Feature Selection",description:"Feature selection refers to the process of filtering out or removing features from a dataset. There are two main reasons to perform feature selection: removing redundant (very similar information content) features and filtering out irrelevant (information content not valuable w.r.t. the target) features that may worsen model performance. The difference between feature extraction and feature selection lies in that selection reduces the number of features while extraction creates new features or modifies existing ones. A universal approach to feature selection usually consists of obtaining a measure of \u201cusefulness\u201d for each feature and then eliminating those that do not meet a threshold. Note that no matter which method for feature selection is used, the best result will likely come from trial and error since the optimal techniques and tools vary for datasets.",source:"@site/docs/10-datascience/feature-selection.md",sourceDirName:"10-datascience",slug:"/datascience/feature-selection",permalink:"/docs/datascience/feature-selection",draft:!1,tags:[],version:"current",lastUpdatedBy:"sparsh",lastUpdatedAt:1681047270,formattedLastUpdatedAt:"Apr 9, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Rosenblatt Perceptron",permalink:"/docs/datascience/deep-learning/perceptron"},next:{title:"Metrics and Evaluation",permalink:"/docs/datascience/metrics-and-evaluation"}},l={},c=[{value:"Information Gain",id:"information-gain",level:2},{value:"Variance Threshold",id:"variance-threshold",level:2},{value:"High-Correlation Method",id:"high-correlation-method",level:2},{value:"Recursive Feature Elimination",id:"recursive-feature-elimination",level:2},{value:"Permutation Importance",id:"permutation-importance",level:2},{value:"LASSO Coefficient Selection",id:"lasso-coefficient-selection",level:2}],u={toc:c};function f(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"feature-selection"},"Feature Selection"),(0,n.kt)("p",null,"Feature selection refers to the process of filtering out or removing features from a dataset. There are two main reasons to perform feature selection: removing redundant (very similar information content) features and filtering out irrelevant (information content not valuable w.r.t. the target) features that may worsen model performance. The difference between feature extraction and feature selection lies in that selection reduces the number of features while extraction creates new features or modifies existing ones. A universal approach to feature selection usually consists of obtaining a measure of \u201cusefulness\u201d for each feature and then eliminating those that do not meet a threshold. Note that no matter which method for feature selection is used, the best result will likely come from trial and error since the optimal techniques and tools vary for datasets."),(0,n.kt)("h2",{id:"information-gain"},"Information Gain"),(0,n.kt)("p",null,"Information Gain, synonymous with Kullback-Leiber divergence, can be defined as a measure of how much a certain feature tells us about a target class. Before discussing its use in feature selection, note that Information Gain could act as another \u201cmetric\u201d for finding the best split in the Decision Tree along with Gini Impurity and Entropy. One major drawback of Information Gain being used in Decision Trees is that it tends to select features with more unique values. One example is if the dataset contains a certain attribute like Date, in usual cases, it would not be useful for Decision Trees to utilize such feature as its values are independent of targets. However, Information Gain would output a score for the Date feature potentially higher than other more useful features. Additionally, when dealing with categorical features, Information Gain favors features with more categories, which might not be ideal. Although Information Gain may be useful in serving as a \u201cmetric\u201d during Decision Tree splits in rare cases, most of the time, it\u2019s not considered due to its major disadvantage."),(0,n.kt)("p",null,"In technical terms, Information Gain produces the difference in Entropy before and after a transformation. When applied to classification feature selection, it calculates the statistical dependence between two variables, or how much information the two share; it\u2019s sometimes referred to as Mutual Information. In statistics, the term information refers to how surprising a certain event is. An event is considered more surprising than another when it has a more balanced probability distribution and thus more Entropy. Entropy measures the \u201cpurity\u201d of the dataset in terms of the probability distribution of samples belonging to classes. For example, a dataset with perfectly balanced targets (50-50 split) would result in Entropy of 1, while a dataset with imbalanced targets (90-10 split) would produce a low Entropy. Information Gain evaluates the impact on the purity by splitting the dataset by each unique value in the dataset. Essentially, it calculates one feature\u2019s usefulness in relation to the target based on how well the feature splits the target."),(0,n.kt)("p",null,"Information Gain is extremely useful as a feature selection technique for relatively smaller datasets since the computational cost increases tremendously for larger datasets with more unique valued features."),(0,n.kt)("h2",{id:"variance-threshold"},"Variance Threshold"),(0,n.kt)("p",null,"Compared with Information Gain, the Variance Threshold provides a significantly faster and simpler method of feature selection with decent improvements on models. The Variance Threshold is usually used as a baseline feature selector to filter out inadequate features without the significant computational cost."),(0,n.kt)("h2",{id:"high-correlation-method"},"High-Correlation Method"),(0,n.kt)("p",null,"One of the most straightforward ways to determine whether some features will be adequate indicators of the target is by correlation. In statistics, correlation defines the relevancy between two variables; it usually produces a measure that specifies how well the two variables are related. The relationship between features and targets is arguably the most important factor that determines whether the trained model will predict the target well or not. Those features with low correlation to the target will present as noise and possibly reduce the performance of the trained model. Linear correlation between two variables calculated using Pearson\u2019s Correlation Coefficient is frequently used to measure how closely two variables align with each other or their correlation. "),(0,n.kt)("p",null,"Pearson\u2019s Correlation Coefficient produces a value between \u20131 and 1; \u20131 illustrates a negative correlation between two variables, while 1 illustrates a perfect positive correlation. A value of 0 indicates no correlation at all between variables. Generally, when the value lies above 0.5 or below \u20130.5, the two variables are considered to have a strong positive/negative correlation."),(0,n.kt)("h2",{id:"recursive-feature-elimination"},"Recursive Feature Elimination"),(0,n.kt)("p",null,"In previous sections, all feature selection techniques introduced are in the form of measuring some individual properties relative to each feature and then determining the removal of features based on their \u201cmeasures.\u201d These methods are universal and can be applied to any dataset using the same pipeline and process. But at the end of the day, feature selection is aimed at improving model performance, and therefore it is crucial to observe how well each feature specifically contributes to model performance. Recursive Feature Elimination (RFE) is a process in which features are removed (eliminated) based on how much they contribute to a trained model."),(0,n.kt)("p",null,"Due to its effectiveness and flexibility, RFE is one of the most used feature selection algorithms. RFE is not a single method or tool; it\u2019s a wrapper that can adapt to any model depending on the use case. In the following example, Random Forest will be used as the model for feature selection; however, it can be replaced with any other model to improve performance."),(0,n.kt)("h2",{id:"permutation-importance"},"Permutation Importance"),(0,n.kt)("p",null,"Permutation Importance can be seen as another way of calculating feature importance. Both Permutation Importance and feature importance measure how much one feature contributes to the overall prediction. However, the calculation of Permutation Importance is independent of the model, meaning that the algorithm remains the same no matter what machine learning model is used. Permutation Importance\u2019s speed depends on the model prediction rate, but it\u2019s still relatively faster than other feature selection algorithms such as RFE."),(0,n.kt)("p",null,"Permutation Importance produces a measure of relevancy from the feature to the target. Logically, features with low Permutation Importance are potentially unnecessary to the model, while features with higher Permutation Importance may be deemed more useful to the model."),(0,n.kt)("p",null,"The algorithm starts by shuffling the rows of one feature in the validation dataset. After the shuffling, we predict using the trained model and observe the effect that the shuffling has on performance. Theoretically, if one feature is crucial to the model, it would significantly decrease the accuracy of the model prediction. On the other hand, if the feature shuffled does not contribute to model prediction as much, then it wouldn\u2019t affect the model performance as much. By computing the loss function compared to the ground-truth values, we can obtain a measure of feature importance by the performance deterioration from shuffled features."),(0,n.kt)("h2",{id:"lasso-coefficient-selection"},"LASSO Coefficient Selection"),(0,n.kt)("p",null,"Recall that during Linear Regression, a coefficient is assigned to each feature, acting as a weight that decides how much that feature will contribute to the final prediction. Ideally, a perfectly trained regression model would also have perfect coefficients and thus perfect feature importance. As RFE and Permutation Importance demonstrate the concept, we could select and remove features based on their feature importance. Those features with low or zero weight are unimportant or do not contribute to the prediction, so we do not need them for training as they only increase training time and possibly even reduce the performance of our models. Luckily, LASSO regression does this exactly. Depending on the adjustable hyperparameter, the weights of unimportant features will shrink to zero."))}f.isMDXComponent=!0}}]);